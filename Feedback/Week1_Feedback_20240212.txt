Starting code feedback for Zhongbin, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 8.05 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: HPC, .git, week1, Groupwork, week2, miniproject, Feedback, week3

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~
*.tmp
week1/sandbox



**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
MY CMEE Coursework Repository
CMEECoursework repository contains the in-class work and coursework in each weeks. 
There are three directories whcih are week 1 to 3, each contains code, data, results and sandbox.
Code directory is for saving all the code and scripts.
Data directory is for saving all the data used in scripts.
Results directory is for saving all the ouput results of scripts.
Sandbox directory is for experiment and testing codes. 
I put sandbox directoies into gitignore since nothing important in these directories.


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: writeup, results, data, code

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
week1 content:
code:1.boilerplate.sh: 
A simple boilerplate for shell scripts, which can output a short message.
2.CompileLaTeX.sh:
Compiles a LaTeX file into a PDF. It runs pdflatex and bibtex on the provided LaTeX file, then opens the resulting PDF.
3.ConcatenateTwoFiles.sh:
Concatenates two input files into a single output file. It checks if there is correct number of input arguments.There should be two input files and one file for output.
4.CountLines.sh:
Counts the number of lines in a provided file. It checks if there is correct number which is one of input arguments.
5.csvtospace.sh:
Converts a CSV (comma-separated values) file to a space-separated format. It checks for two input arguments and verifies the existence of the input file. There should be one input file and one file for ouput.
6.MyExampleScript.sh:
A script demonstrating the use of variables and displays a message.
7.tiff2png.sh:
Converts all TIFF files in the current directory to PNG format using the convert command.
8.UnixPrac1.txt:
Contains Unix shell commands for processing FASTA formatted files. Includes line counting, character counting, specific sequence extraction, nucleotide counting, and ratio calculations.
9.variables.sh
Illustrates the use of variables in shell scripts. It includes examples of special variables and their usage.
10.tabtocsv.sh
Substitutes tabs in the provided file with commas, effectively converting a tab-delimited file into a CSV format.

data: 
I used three FASTA data file which are 407228326.fasta, 407228412.fasta and E.coli.fasta representing DNA squences.

results:
There are no results from the scripts. However, some scripts might produce output if the scripts are used. These output should be put in results directory.

writeup:
I put FirstExample.tex in a seperate directory which is called writeup. I used FirstExample.tex to test CompileLaTeX.sh. Remember to use relative path when inputs the file. The pdf outputs are also in writeup directory.
**********************************************************************

Results directory is empty - good! 

Found 11 code files: csvtospace.sh, FirstExample.tex, CompileLaTeX.sh, tiff2png.sh, boilerplate.sh, ConcatenateTwoFiles.sh, tabtocsv.sh, MyExampleScript.sh, variables.sh, CountLines.sh, UnixPrac1.txt

Found the following extra files: FirstExample.pdf
0.5 pt deducted per extra file

Current Points = 99.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
if [ $# -ne 2 ]; then
#when the input files are not 2, the message comes out using echo
    echo "Error. Format: $0 <InputFile1> <OutputFile>"
    exit
fi

if [ ! -f "$1" ]; then
#test if the files exist
    echo "Input file does not exist"
    exit
fi

if [ ! -f "$2" ]; then
#test if the files exist
    echo "Output file does not exist."
    exit
cat $1 | tr -s "," " " >> $2
echo done!
exit
**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
Error. Format: csvtospace.sh <InputFile1> <OutputFile>

**********************************************************************

Code ran without errors

Time consumed = 0.00508s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}

\title{A Simple Document}

\author{Your Name}

\date{}

\begin{document}
  \maketitle
  
  \begin{abstract}
    This paper analyzes a seminal equation in population biology.
  \end{abstract}
  
  \section{Introduction}
    Blah Blah
  
  \section{Materials \& Methods}
  
  A foundational equation of population biology is:
  
  \begin{equation}
    \frac{dN}{dt} = r N (1 - \frac{N}{K})
  \end{equation}
  
  It was first proposed by Verhulst in 1838 \cite{verhulst1838notice}.
  
  \bibliographystyle{plain}
  
  \bibliography{FirstBiblio}

\end{document}
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:

**********************************************************************
#!/bin/bash
pdflatex $1.tex
bibtex $1
pdflatex $1.tex
pdflatex $1.tex
evince $1.pdf &

## Cleanup
rm *.aux
rm *.log
rm *.bbl
rm *.blg
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 


**********************************************************************
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(/usr/share/texlive/texmf-dist/tex/latex/tools/.tex
LaTeX2e <2021-11-15> patch level 1
L3 programming layer <2022-01-21> File ignored)
*
! Emergency stop.
<*> .tex
        
!  ==> Fatal error occurred, no output PDF file produced!
Transcript written on .log.
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded 
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

bibtex: Need exactly one file argument.
Try `bibtex --help' for more information.
rm: cannot remove '*.aux': No such file or directory
rm: cannot remove '*.log': No such file or directory
rm: cannot remove '*.bbl': No such file or directory
rm: cannot remove '*.blg': No such file or directory

(process:8476): Gtk-WARNING **: 21:22:47.474: Locale not supported by C library.
	Using the fallback 'C' locale.
/home/mhasoba/snap/code/common/.cache/gio-modules/libgiolibproxy.so: cannot open shared object file: Permission denied
Failed to load module: /home/mhasoba/snap/code/common/.cache/gio-modules/libgiolibproxy.so

(evince:8476): Gtk-WARNING **: 21:22:47.496: Theme parsing error: gtk-keys.css:1:0: Failed to import: Error opening file /snap/code/151/usr/share/themes/Default/gtk-3.0/gtk-keys.css: Permission denied
Gtk-Message: 21:22:47.496: Failed to load module "canberra-gtk-module"
Gtk-Message: 21:22:47.496: Failed to load module "canberra-gtk-module"
/home/mhasoba/snap/code/common/.cache/gio-modules/libdconfsettings.so: cannot open shared object file: Permission denied
Failed to load module: /home/mhasoba/snap/code/common/.cache/gio-modules/libdconfsettings.so

** (evince:8476): WARNING **: 21:22:47.646: set_filenames: Error when getting information for file ?/home/mhasoba/Documents/Teaching/IC_CMEE/2023-24/Coursework/StudentRepos/ZhongbinHu_/week1/code/.pdf?: No such file or directory

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash

for f in *.tif; 
    do  
        echo "Converting $f"; 
        convert "$f"  "$(basename "$f" .tif).png"; 
    done
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
Converting *.tif

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

convert-im6.q16: unable to open image `*.tif': No such file or directory @ error/blob.c/OpenBlob/2924.
convert-im6.q16: no images defined `*.png' @ error/convert.c/ConvertImageCommand/3229.

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/sh
#Author:zh1323@ic.ac.uk
#Script:boilerplate.sh
#Desc:simple boilerplate for shell scrpts
#Arguments:none 
#Date: Oct 2023

echo -e "\nThis is a shell script! \n"

#exit

**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00288s

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#when the input files are not 3, the message comes out using echo
if [ $# -ne 3 ]; then
    echo "Error. Format: $0 <InputFile1> <InuputFile2> <OutputFile>"
    exit
fi


InputFiles=("$1" "$2")
for InputFiles in "{InputFiles[@]}";do
#using a for loop to include both input files
    if [ ! -f "$InputFiles" ]; then
    #test if the files exist
        echo "Input file does not exist."
        exit
    fi

if [ ! -f "$3" ]; then
#test if the files exist
    echo "Output file does not exist."
    exit
fi

cat $1 > $3
cat $2 >> $3
echo "Merged File is"
cat $3
echo done!
exit

**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Error. Format: ConcatenateTwoFiles.sh <InputFile1> <InuputFile2> <OutputFile>

**********************************************************************

Code ran without errors

Time consumed = 0.00233s

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: zh1323@ic.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2023

if [ $# -ne 1 ]; then
#when the input files are not 1, the message comes out using echo
    echo "Error. Format: $0 <InputFile1>"
    exit
fi

if [ ! -f "$1" ]; then
#test if the files exist
    echo "Input file does not exist"
    exit
fi

echo "creating a comma delimited version of $1 ..."
cat $1 | tr -s "\t" "," >> $1.csv
echo "Done!"
exit

**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Error. Format: tabtocsv.sh <InputFile1>

**********************************************************************

Code ran without errors

Time consumed = 0.00277s

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/sh

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00275s

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/sh

## Illustrates the use of variables 

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first argument is $1"
echo "The second argument is $2"

# Assigned Variables; Explicit declaration:
MY_VAR='some string' 
echo 'the current value of the variable is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assigned Variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM

**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 
the current value of the variable is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

expr: syntax error: missing argument after ‘+’

======================================================================
Inspecting script file CountLines.sh...

File contents are:

**********************************************************************
#!/bin/bash
if [ $# -ne 1 ]; then
#when the input files are not 1, the message comes out using echo
    echo "Error. Format: $0 <InputFile1>"
    exit
fi

if [ ! -f "$1" ]; then
#test if the files exist
    echo "Input file does not exist"
    exit
fi

NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo done!
exit


**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 


**********************************************************************
Error. Format: CountLines.sh <InputFile1>

**********************************************************************

Code ran without errors

Time consumed = 0.00263s

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************

#1
#read the files using cat command and then count the lines using wc
cat ../data/fasta/407228326.fasta | wc -l
cat ../data/fasta/407228412.fasta | wc -l
cat ../data/fasta/E.coli.fasta | wc -l
#wc -l ../data/fasta/407228326.fasta
#antother way to count the lines

#2
#print things from scond line
tail -n +2 ../data/fasta/E.coli.fasta

#3
#count the letters using wc -c
tail -n +2 ../data/fasta/E.coli.fasta | wc -c

#4
#pick out "ATGC" using grep, removing newline characters using tr -d
grep -o "ATGC" ../data/fasta/E.coli.fasta | tr -d "\n" | wc -c

#5
#count A,T,C,G
A_count=$(tail -n+2 ../data/fasta/E.coli.fasta | tr -d "\n" | grep -o 'A'| wc -c )
T_count=$(tail -n+2 ../data/fasta/E.coli.fasta | tr -d "\n" | grep -o 'T'| wc -c)
C_count=$(tail -n+2 ../data/fasta/E.coli.fasta | tr -d "\n" | grep -o 'C'| wc -c )
G_count=$(tail -n+2 ../data/fasta/E.coli.fasta | tr -d "\n" | grep -o 'G'| wc -c )
#caculate ratio using bc command
Ratio=$(bc -l <<< "scale=2; ($A_count + $T_count) / ($G_count + $C_count) ")

echo "$Ratio"

#grep A ../data/fasta/E.coli.fasta
#another way to pick out A, T, C, G

**********************************************************************

Testing UnixPrac1.txt...

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!