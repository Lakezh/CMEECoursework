max_slope <- -Inf
# Ensure that window_size is not larger than the number of rows in subset
if (window_size > nrow(subset)) {
stop("window_size is larger than the number of rows in the subset")
}
for (i in 1:(nrow(subset) - window_size + 1)) {
logPopBio_window <- subset$LogN[i:(i + window_size - 1)]
time_window <- subset$Time[i:(i + window_size - 1)]
fit <- lm(logPopBio_window ~ time_window)
slope <- coef(fit)["time_window"]
if (!is.na(slope) && !is.null(slope) && slope > max_slope) {
max_slope <- slope
}
}
return(max_slope)
}
window_size <- 2
r_max_start <- find_max_slope(subset, window_size)
#intialize the result
tryCatch({
fit_logistic <- nlsLM(LogN ~ logistic_model(t = Time, r_max, K, N_0), subset,
start = list(r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 500))
return(fit_logistic)
}, error = function(e) {
warning("Error in fitting model for subset ", id, ": ", e$message)
})
}
# Compute R-squared and other statistics if fitting is successful
logistic_results <- data.frame(Unique_ID = integer(),
Model = character(),
R2 = numeric(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE)
for (id in seq_along(subsets)){
subset <- subsets[[id]]
subset <- subset[subset$Time > 0, ]
subset_logisitc <- fit_logistic_model(subset,id)
tryCatch({
residuals <- residuals(subset_logisitc)
ss_res <- sum(residuals^2)
ss_tot <- sum((subset$LogN - mean(subset$LogN))^2)
r_squared <- 1 - (ss_res / ss_tot)
# Calculate AIC and BIC
aic_value <- AIC(subset_logisitc)
bic_value <- BIC(subset_logisitc)
#intinal the result
result <- data.frame(Unique_ID = id, Model = "Logistic", R2 = r_squared, AIC = aic_value, BIC = bic_value)
logistic_results <- rbind(logistic_results, result)
}, error = function(e) {
warning("Error in calculating results for subset ", id, ": ", e$message)
})
print(logistic_results)
}
#fit the logestic model, using rolling regression
logistic_model <- function(t, r_max, K, N_0) {
return(N_0 * K * exp(r_max * t)/(K + N_0 * (exp(r_max * t) - 1)))
}
fit_logistic_model <- function(subset,id){
subset <- subset[!is.na(subset$LogN) & !is.nan(subset$LogN) & !is.infinite(subset$LogN), ]
# Calculate starting values using LogPopBio
N_0_start <- min(subset$LogN)
K_start <- max(subset$LogN)
find_max_slope <- function(subset, window_size) {
max_slope <- -Inf
# Ensure that window_size is not larger than the number of rows in subset
if (window_size > nrow(subset)) {
stop("window_size is larger than the number of rows in the subset")
}
for (i in 1:(nrow(subset) - window_size + 1)) {
logPopBio_window <- subset$LogN[i:(i + window_size - 1)]
time_window <- subset$Time[i:(i + window_size - 1)]
fit <- lm(logPopBio_window ~ time_window)
slope <- coef(fit)["time_window"]
if (!is.na(slope) && !is.null(slope) && slope > max_slope) {
max_slope <- slope
}
}
return(max_slope)
}
window_size <- 4
r_max_start <- find_max_slope(subset, window_size)
#intialize the result
tryCatch({
fit_logistic <- nlsLM(LogN ~ logistic_model(t = Time, r_max, K, N_0), subset,
start = list(r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 500))
return(fit_logistic)
}, error = function(e) {
warning("Error in fitting model for subset ", id, ": ", e$message)
})
}
# Compute R-squared and other statistics if fitting is successful
logistic_results <- data.frame(Unique_ID = integer(),
Model = character(),
R2 = numeric(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE)
for (id in seq_along(subsets)){
subset <- subsets[[id]]
subset <- subset[subset$Time > 0, ]
subset_logisitc <- fit_logistic_model(subset,id)
tryCatch({
residuals <- residuals(subset_logisitc)
ss_res <- sum(residuals^2)
ss_tot <- sum((subset$LogN - mean(subset$LogN))^2)
r_squared <- 1 - (ss_res / ss_tot)
# Calculate AIC and BIC
aic_value <- AIC(subset_logisitc)
bic_value <- BIC(subset_logisitc)
#intinal the result
result <- data.frame(Unique_ID = id, Model = "Logistic", R2 = r_squared, AIC = aic_value, BIC = bic_value)
logistic_results <- rbind(logistic_results, result)
}, error = function(e) {
warning("Error in calculating results for subset ", id, ": ", e$message)
})
print(logistic_results)
}
#fit the logestic model, using rolling regression
logistic_model <- function(t, r_max, K, N_0) {
return(N_0 * K * exp(r_max * t)/(K + N_0 * (exp(r_max * t) - 1)))
}
fit_logistic_model <- function(subset,id){
subset <- subset[!is.na(subset$LogN) & !is.nan(subset$LogN) & !is.infinite(subset$LogN), ]
# Calculate starting values using LogPopBio
N_0_start <- min(subset$LogN)
K_start <- max(subset$LogN)
find_max_slope <- function(subset, window_size) {
max_slope <- -Inf
# Ensure that window_size is not larger than the number of rows in subset
if (window_size > nrow(subset)) {
stop("window_size is larger than the number of rows in the subset")
}
for (i in 1:(nrow(subset) - window_size + 1)) {
logPopBio_window <- subset$LogN[i:(i + window_size - 1)]
time_window <- subset$Time[i:(i + window_size - 1)]
fit <- lm(logPopBio_window ~ time_window)
slope <- coef(fit)["time_window"]
if (!is.na(slope) && !is.null(slope) && slope > max_slope) {
max_slope <- slope
}
}
return(max_slope)
}
window_size <- 3
r_max_start <- find_max_slope(subset, window_size)
#intialize the result
tryCatch({
fit_logistic <- nlsLM(LogN ~ logistic_model(t = Time, r_max, K, N_0), subset,
start = list(r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 500))
return(fit_logistic)
}, error = function(e) {
warning("Error in fitting model for subset ", id, ": ", e$message)
})
}
# Compute R-squared and other statistics if fitting is successful
logistic_results <- data.frame(Unique_ID = integer(),
Model = character(),
R2 = numeric(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE)
for (id in seq_along(subsets)){
subset <- subsets[[id]]
subset <- subset[subset$Time > 0, ]
subset_logisitc <- fit_logistic_model(subset,id)
tryCatch({
residuals <- residuals(subset_logisitc)
ss_res <- sum(residuals^2)
ss_tot <- sum((subset$LogN - mean(subset$LogN))^2)
r_squared <- 1 - (ss_res / ss_tot)
# Calculate AIC and BIC
aic_value <- AIC(subset_logisitc)
bic_value <- BIC(subset_logisitc)
#intinal the result
result <- data.frame(Unique_ID = id, Model = "Logistic", R2 = r_squared, AIC = aic_value, BIC = bic_value)
logistic_results <- rbind(logistic_results, result)
}, error = function(e) {
warning("Error in calculating results for subset ", id, ": ", e$message)
})
print(logistic_results)
}
subsets[[146]]
#fit the linear model
fit_linear_model <- function(subset,id){
fit_quadratic <- lm(LogN ~ poly(Time, 2, raw = TRUE), data = subset)
fit_cubic <- lm(LogN ~ poly(Time, 3, raw = TRUE), data = subset)
summary_quadratic <- data.frame(Unique_ID = id, Model = "Quadratic",
R2 = glance(fit_quadratic)$r.squared,
AIC = AIC(fit_quadratic),
BIC = BIC(fit_quadratic))
summary_cubic <- data.frame(Unique_ID = id, Model = "Cubic",
R2 = glance(fit_cubic)$r.squared,
AIC = AIC(fit_cubic),
BIC = BIC(fit_cubic))
# Combine summaries
results <- rbind(summary_quadratic, summary_cubic)
return(results)
}
linear_results <- data.frame(Unique_ID = integer(),
Model = character(),
R2 = numeric(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE)
for (id in seq_along(subsets)){
subset <- subsets[[id]]
subset_logisitc <- fit_logistic_model(subset,id)
fit_quadratic <- lm(LogN ~ poly(Time, 2, raw = TRUE), data = subset)
fit_cubic <- lm(LogN ~ poly(Time, 3, raw = TRUE), data = subset)
summary_quadratic <- data.frame(Unique_ID = id, Model = "Quadratic",
R2 = glance(fit_quadratic)$r.squared,
AIC = AIC(fit_quadratic),
BIC = BIC(fit_quadratic))
summary_cubic <- data.frame(Unique_ID = id, Model = "Cubic",
R2 = glance(fit_cubic)$r.squared,
AIC = AIC(fit_cubic),
BIC = BIC(fit_cubic))
result <- rbind(summary_quadratic, summary_cubic)
linear_results <- rbind(linear_results, result)
}
subsets[[109]]
#add a population column in log scale
df$PopBio[df$PopBio <= 0] <- NA
#remove the negative values when calculating logN
data <- na.omit(df)
data$LogN <- log(data$PopBio)
# Remove rows with NA, NaN, or Inf values in LogPopBio
data <- data[!is.na(data$LogN) & !is.nan(data$LogN) & !is.infinite(data$LogN), ]
#add a new columen which represent the ID
data <- data %>%
mutate(Unique_ID = paste(Species, Temp, Medium, Citation, sep = "_"))
subsets <- split(data, data$Unique_ID)
any(is.infinite(data$LogN))
create_LogPopBio <- function(subset) {
if ("PopBio" %in% names(subset)) {
# Filter out rows where Time <= 0
subset <- subset[subset$Time > 0, ]
# Apply log transformation and create new column
subset$LogN<- log(subset$PopBio)
} else {
stop("Column 'PopBio' not found in the dataset")
}
return(subset)
}
# Apply the function to each subset
subsets <- lapply(subsets, create_LogPopBio)
#fit the linear model
fit_linear_model <- function(subset,id){
fit_quadratic <- lm(LogN ~ poly(Time, 2, raw = TRUE), data = subset)
fit_cubic <- lm(LogN ~ poly(Time, 3, raw = TRUE), data = subset)
summary_quadratic <- data.frame(Unique_ID = id, Model = "Quadratic",
R2 = glance(fit_quadratic)$r.squared,
AIC = AIC(fit_quadratic),
BIC = BIC(fit_quadratic))
summary_cubic <- data.frame(Unique_ID = id, Model = "Cubic",
R2 = glance(fit_cubic)$r.squared,
AIC = AIC(fit_cubic),
BIC = BIC(fit_cubic))
# Combine summaries
results <- rbind(summary_quadratic, summary_cubic)
return(results)
}
linear_results <- data.frame(Unique_ID = integer(),
Model = character(),
R2 = numeric(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE)
for (id in seq_along(subsets)){
subset <- subsets[[id]]
subset_logisitc <- fit_logistic_model(subset,id)
fit_quadratic <- lm(LogN ~ poly(Time, 2, raw = TRUE), data = subset)
fit_cubic <- lm(LogN ~ poly(Time, 3, raw = TRUE), data = subset)
summary_quadratic <- data.frame(Unique_ID = id, Model = "Quadratic",
R2 = glance(fit_quadratic)$r.squared,
AIC = AIC(fit_quadratic),
BIC = BIC(fit_quadratic))
summary_cubic <- data.frame(Unique_ID = id, Model = "Cubic",
R2 = glance(fit_cubic)$r.squared,
AIC = AIC(fit_cubic),
BIC = BIC(fit_cubic))
result <- rbind(summary_quadratic, summary_cubic)
linear_results <- rbind(linear_results, result)
}
subsets[[109]]
#fit the logestic model
logistic_model <- function(t, r_max, K, N_0) {
return(N_0 * K * exp(r_max * t)/(K + N_0 * (exp(r_max * t) - 1)))
}
fit_logistic_model <- function(subset,id){
if (!"LogN" %in% names(subset)) {
subset$LogN <- log(subset$N)
}
subset <- subset[!is.na(subset$LogN) & !is.nan(subset$LogN) & !is.infinite(subset$LogN), ]
subset <- subset[subset$Time > 0, ]
# Calculate starting values using LogPopBio
N_0_start <- min(subset$LogN)
K_start <- max(subset$LogN)
#maybe add a normal distribution here
for (i in seq_along(diff(subset$LogN))){
r_max_starts <- numeric(length(diff(subset$LogN)))
r_max_starts[i] <- diff(subset$LogN)[i]/diff(subset$Time)[i]
}
r_max_start <- max(r_max_starts)
#intialize the result
tryCatch({
fit_logistic <- nlsLM(LogN ~ logistic_model(t = Time, r_max, K, N_0), subset,
start = list(r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 500))
return(fit_logistic)
}, error = function(e) {
warning("Error in fitting model for subset ", id, ": ", e$message)
})
}
# Compute R-squared and other statistics if fitting is successful
results <- data.frame(Unique_ID = integer(),
Model = character(),
R2 = numeric(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE)
for (id in seq_along(subsets)){
subset <- subsets[[id]]
subset_logisitc <- fit_logistic_model(subset,id)
tryCatch({
residuals <- residuals(subset_logisitc)
ss_res <- sum(residuals^2)
ss_tot <- sum((subset$LogN - mean(subset$LogN))^2)
r_squared <- 1 - (ss_res / ss_tot)
# Calculate AIC and BIC
aic_value <- AIC(subset_logisitc)
bic_value <- BIC(subset_logisitc)
#intinal the result
result <- data.frame(Unique_ID = id, Model = "Logistic", R2 = r_squared, AIC = aic_value, BIC = bic_value)
results <- rbind(results, result)
}, error = function(e) {
warning("Error in calculating results for subset ", id, ": ", e$message)
})
print(results)
}
#for the plots
#output the result
subsets[[146]]
#fit the logestic model, using rolling regression
logistic_model <- function(t, r_max, K, N_0) {
return(N_0 * K * exp(r_max * t)/(K + N_0 * (exp(r_max * t) - 1)))
}
fit_logistic_model <- function(subset,id){
subset <- subset[!is.na(subset$LogN) & !is.nan(subset$LogN) & !is.infinite(subset$LogN), ]
# Calculate starting values using LogPopBio
N_0_start <- min(subset$LogN)
K_start <- max(subset$LogN)
find_max_slope <- function(subset, window_size) {
max_slope <- -Inf
# Ensure that window_size is not larger than the number of rows in subset
if (window_size > nrow(subset)) {
stop("window_size is larger than the number of rows in the subset")
}
for (i in 1:(nrow(subset) - window_size + 1)) {
logPopBio_window <- subset$LogN[i:(i + window_size - 1)]
time_window <- subset$Time[i:(i + window_size - 1)]
fit <- lm(logPopBio_window ~ time_window)
slope <- coef(fit)["time_window"]
if (!is.na(slope) && !is.null(slope) && slope > max_slope) {
max_slope <- slope
}
}
return(max_slope)
}
window_size <- 3
r_max_start <- find_max_slope(subset, window_size)
#intialize the result
tryCatch({
fit_logistic <- nlsLM(LogN ~ logistic_model(t = Time, r_max, K, N_0), subset,
start = list(r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 500))
return(fit_logistic)
}, error = function(e) {
warning("Error in fitting model for subset ", id, ": ", e$message)
})
}
# Compute R-squared and other statistics if fitting is successful
logistic_results <- data.frame(Unique_ID = integer(),
Model = character(),
R2 = numeric(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE)
for (id in seq_along(subsets)){
subset <- subsets[[id]]
subset <- subset[subset$Time > 0, ]
subset_logisitc <- fit_logistic_model(subset,id)
tryCatch({
residuals <- residuals(subset_logisitc)
ss_res <- sum(residuals^2)
ss_tot <- sum((subset$LogN - mean(subset$LogN))^2)
r_squared <- 1 - (ss_res / ss_tot)
# Calculate AIC and BIC
aic_value <- AIC(subset_logisitc)
bic_value <- BIC(subset_logisitc)
#intinal the result
result <- data.frame(Unique_ID = id, Model = "Logistic", R2 = r_squared, AIC = aic_value, BIC = bic_value)
logistic_results <- rbind(logistic_results, result)
}, error = function(e) {
warning("Error in calculating results for subset ", id, ": ", e$message)
})
print(logistic_results)
}
#fit the gompertz model
gompertz_model <- function(t, r_max, K, N_0, t_lag){ # Modified gompertz growth model (Zwietering 1990)
return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}
fit_gompertz_model <- function(subset,id){
subset <- subset[!is.na(subset$LogN) & !is.nan(subset$LogN) & !is.infinite(subset$LogN), ]
# Calculate starting values using Log population
N_0_start <- min(subset$LogN)
K_start <- max(subset$LogN)
#maybe add a normal distribution here
find_max_slope <- function(subset, window_size) {
max_slope <- -Inf
# Ensure that window_size is not larger than the number of rows in subset
if (window_size > nrow(subset)) {
stop("window_size is larger than the number of rows in the subset")
}
for (i in 1:(nrow(subset) - window_size + 1)) {
logPopBio_window <- subset$LogN[i:(i + window_size - 1)]
time_window <- subset$Time[i:(i + window_size - 1)]
fit <- lm(logPopBio_window ~ time_window)
slope <- coef(fit)["time_window"]
if (!is.na(slope) && !is.null(slope) && slope > max_slope) {
max_slope <- slope
}
}
return(max_slope)
}
window_size <- 3
r_max_start <- find_max_slope(subset, window_size)
t_lag_start <- subset$Time[which.max(diff(diff(subset$LogN)))]
#check if the starting values are available
N_0_start <- ifelse(is.finite(N_0_start), N_0_start, 1)
K_start <- ifelse(is.finite(K_start), K_start, max(subset$N, na.rm = TRUE))
r_max_start <- ifelse(is.finite(r_max_start), r_max_start, 0.1)
t_lag_start <- ifelse(is.finite(t_lag_start) && t_lag_start > 0, t_lag_start, min(subset$Time, na.rm = TRUE))
#fit the gompertz model
tryCatch({
fit_gompertz <- nlsLM(LogN ~ gompertz_model(t = Time, r_max, K, N_0, t_lag), subset,
start = list(t_lag = t_lag_start, r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 500))
return(fit_gompertz)
}, error = function(e) {
warning("Error in fitting model for subset ", id, ": ", e$message)
})
}
# Compute R-squared and other statistics if fitting is successful
gompertz_results <- data.frame(Unique_ID = integer(),
Model = character(),
R2 = numeric(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE)
for (id in seq_along(subsets)){
subset <- subsets[[id]]
subset_gompertz <- fit_gompertz_model(subset,id)
tryCatch({
residuals <- residuals(subset_gompertz)
ss_res <- sum(residuals^2)
ss_tot <- sum((subset$LogN - mean(subset$LogN))^2)
r_squared <- 1 - (ss_res / ss_tot)
# Calculate AIC and BIC
aic_value <- AIC(subset_gompertz)
bic_value <- BIC(subset_gompertz)
#output the result
result <- data.frame(Unique_ID = id, Model = "Gompertz", R2 = r_squared, AIC = aic_value, BIC = bic_value)
gompertz_results <- rbind(gompertz_results, result)
}, error = function(e) {
warning("Error in fitting model for subset ", id, ": ", e$message)
})
print(gompertz_results)
}
subsets[[109]]
library(dplyr)
# Assuming combined_results is your data frame that contains the fitting results
# It should have columns: UniqueGrowthCurveID, Model, R2, AIC, and BIC
combined_results <- rbind(logistic_results, gompertz_results, linear_results)
# Compare models based on the lowest AIC
best_models_aic <- combined_results %>%
group_by(Unique_ID) %>%
arrange(AIC) %>%
slice(1)
# Compare models based on the lowest BIC
best_models_bic <- combined_results %>%
group_by(Unique_ID) %>%
arrange(BIC) %>%
slice(1)
# Compare models based on the highest R-squared
best_models_r2 <- combined_results %>%
group_by(Unique_ID) %>%
arrange(desc(R2)) %>%
slice(1)
# View the results
best_models_aic
best_models_bic
best_models_r2
table(best_models_aic$Model)
table(best_models_bic$Model)
merged1 <- merge(logistic_results, gompertz_results,by = "Unique_ID")
final_merge <- merge(merged1, linear_results, by = "Unique_ID")
bash miniproject.R
