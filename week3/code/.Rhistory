df <- read.csv("../data/EcolArchives-E089-51-D1.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(model = lm(Prey.mass ~ Predator.mass, data = .)) %>%
  summarize(
    slope = coef(model)[[2]],
    intercept = coef(model)[[1]],
    R = summary(model)$r.squared,
    F_statistic = summary(model)$fstatistic[1],
    p_value = summary(model)$fstatistic[2]
  )
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)
pdf("../results/PP_Regress_Plot.pdf") # Save plot as a PDF in the Results directory
ggplot(data, aes(x = Predator.mass, y = Prey.mass, color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  facet_grid(.~Predator.lifestage) +
  labs(title = "Linear Regression on Predator-Prey Interactions") +
  theme_minimal()
dev.off()
library(ggplot2)
library(dplyr)
# Set the path to the dataset and read it
df <- read.csv("../data/EcolArchives-E089-51-D1.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(model = lm(Prey.mass ~ Predator.mass, data = .)) %>%
  summarize(
    slope = coef(model)[[2]],
    intercept = coef(model)[[1]],
    R = summary(model)$r.squared,
    F_statistic = summary(model)$fstatistic[1],
    p_value = summary(model)$fstatistic[2]
  )
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)
pdf("../results/PP_Regress_Plot.pdf") # Save plot as a PDF in the Results directory
par(mfrow=c(1,5))
ggplot(data, aes(x = Predator.mass, y = Prey.mass, color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  facet_grid(.~Predator.lifestage) +
  labs(title = "Linear Regression on Predator-Prey Interactions") +
  theme_minimal()
dev.off()
library(ggplot2)
library(dplyr)
# Set the path to the dataset and read it
df <- read.csv("../data/EcolArchives-E089-51-D1.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(model = lm(Prey.mass ~ Predator.mass, data = .)) %>%
  summarize(
    slope = coef(model)[[2]],
    intercept = coef(model)[[1]],
    R = summary(model)$r.squared,
    F_statistic = summary(model)$fstatistic[1],
    p_value = summary(model)$fstatistic[2]
  )
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)
pdf("../results/PP_Regress_Plot.pdf") # Save plot as a PDF in the Results directory
par(mfrow=c(5,1))
ggplot(data, aes(x = Predator.mass, y = Prey.mass, color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  facet_grid(.~Predator.lifestage) +
  labs(title = "Linear Regression on Predator-Prey Interactions") +
  theme_minimal()
dev.off()
source("PP_Regress.R")
source("PP_Regress.R")
source("PP_Regress.R")
source("PP_Regress.R")
source("PP_Regress.R")
source("PP_Regress.R")
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
# Calculate the observed correlation coefficient
observed_cor <- cor(ats$Year, ats$Temp)
# Set the number of permutations
n_permutations <- 10000  # You can increase this for more accuracy
# Initialize a vector to store permutation correlation coefficients
perm_cor <- numeric(n_permutations)
# Perform the permutation test
for (i in 1:n_permutations) {
  # Shuffle the temperature data while keeping the years in the same order
  shuffled_temp <- sample(ats$Temp)
  
  # Calculate the correlation coefficient for the shuffled data
  perm_cor[i] <- cor(ats$Year, shuffled_temp)
}
# Assuming you've already conducted the permutation test and have the perm_cor vector
# Load necessary libraries
library(ggplot2)
# Create a density plot of permutation correlation coefficients
density_plot <- ggplot(perm_cor, aes(x = perm_cor)) +
  geom_density(fill = "skyblue", color = "black") +
  labs(title = "Density Plot of Permutation Correlation Coefficients",
       x = "Correlation Coefficients",
       y = "Density")
# Display the plot
print(density_plot)
p_value <- sum(perm_cor >= observed_cor) / n_permutations
p_value
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
# Calculate the observed correlation coefficient
observed_cor <- cor(ats$Year, ats$Temp)
# Set the number of permutations
n_permutations <- 10000  # You can increase this for more accuracy
# Initialize a vector to store permutation correlation coefficients
perm_cor <- numeric(n_permutations)
# Perform the permutation test
for (i in 1:n_permutations) {
  # Shuffle the temperature data while keeping the years in the same order
  shuffled_temp <- sample(ats$Temp)
  
  # Calculate the correlation coefficient for the shuffled data
  perm_cor[i] <- cor(ats$Year, shuffled_temp)
}
# Assuming you've already conducted the permutation test and have the perm_cor vector
# Load necessary libraries
library(ggplot2)
# Create a density plot of permutation correlation coefficients
density_plot <- ggplot(data.frame(perm_cor = perm_cor), aes(x = perm_cor)) +
  geom_density(fill = "skyblue", color = "black") +
  labs(title = "Density Plot of Permutation Correlation Coefficients",
       x = "Correlation Coefficients",
       y = "Density")
# Display the plot
print(density_plot)
p_value <- sum(perm_cor >= observed_cor) / n_permutations
p_value
print(density_plot)
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
# Calculate the observed correlation coefficient
observed_cor <- cor(ats$Year, ats$Temp)
# Set the number of permutations
n_permutations <- 10000  # You can increase this for more accuracy
# Initialize a vector to store permutation correlation coefficients
perm_cor <- numeric(n_permutations)
# Perform the permutation test
for (i in 1:n_permutations) {
  # Shuffle the temperature data while keeping the years in the same order
  shuffled_temp <- sample(ats$Temp)
  
  # Calculate the correlation coefficient for the shuffled data
  perm_cor[i] <- cor(ats$Year, shuffled_temp)
}
# Assuming you've already conducted the permutation test and have the perm_cor vector
# Load necessary libraries
library(ggplot2)
# Create a density plot of permutation correlation coefficients
density_plot <- ggplot(data.frame(perm_cor = perm_cor), aes(x = perm_cor)) +
  geom_density(fill = "skyblue", color = "black") +
  labs(title = "Density Plot of Permutation Correlation Coefficients",
       x = "Correlation Coefficients",
       y = "Density")
# Display the plot
print(density_plot)
p_value <- sum(perm_cor >= observed_cor) / n_permutations
p_value
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
# Calculate the observed correlation coefficient
observed_cor <- cor(ats$Year, ats$Temp)
# Set the number of permutations
n_permutations <- 10000  # You can increase this for more accuracy
# Initialize a vector to store permutation correlation coefficients
perm_cor <- numeric(n_permutations)
# Perform the permutation test
for (i in 1:n_permutations) {
  # Shuffle the temperature data while keeping the years in the same order
  shuffled_temp <- sample(ats$Temp)
  
  # Calculate the correlation coefficient for the shuffled data
  perm_cor[i] <- cor(ats$Year, shuffled_temp)
}
# Assuming you've already conducted the permutation test and have the perm_cor vector
# Load necessary libraries
library(ggplot2)
# Create a density plot of permutation correlation coefficients
ggplot(data.frame(perm_cor = perm_cor), aes(x = perm_cor)) +
  geom_density(fill = "skyblue", color = "black") +
  labs(title = "Density Plot of Permutation Correlation Coefficients",
       x = "Correlation Coefficients",
       y = "Density")
ggsave("../results/Florida.pdf", device = "pdf")
p_value <- sum(perm_cor >= observed_cor) / n_permutations
p_value
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
# Calculate the observed correlation coefficient
observed_cor <- cor(ats$Year, ats$Temp)
# Set the number of permutations
n_permutations <- 10000  # You can increase this for more accuracy
# Initialize a vector to store permutation correlation coefficients
perm_cor <- numeric(n_permutations)
# Perform the permutation test
for (i in 1:n_permutations) {
  # Shuffle the temperature data while keeping the years in the same order
  shuffled_temp <- sample(ats$Temp)
  
  # Calculate the correlation coefficient for the shuffled data
  perm_cor[i] <- cor(ats$Year, shuffled_temp)
}
# Assuming you've already conducted the permutation test and have the perm_cor vector
# Load necessary libraries
library(ggplot2)
# Create a density plot of permutation correlation coefficients
ggplot(data.frame(perm_cor = perm_cor), aes(x = perm_cor)) +
  geom_density(fill = "skyblue", color = "black") +
  labs(title = "Density Plot of Permutation Correlation Coefficients",
       x = "Correlation Coefficients",
       y = "Density")+
  geom_vline(xintercept = observed_cor, linetype = "dashed", color = "red", size = 1)
ggsave("../results/Florida.pdf", device = "pdf")
p_value <- sum(perm_cor >= observed_cor) / n_permutations
p_value
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
# Calculate the observed correlation coefficient
observed_cor <- cor(ats$Year, ats$Temp)
# Set the number of permutations
n_permutations <- 10000  # You can increase this for more accuracy
# Initialize a vector to store permutation correlation coefficients
perm_cor <- numeric(n_permutations)
# Perform the permutation test
for (i in 1:n_permutations) {
  # Shuffle the temperature data while keeping the years in the same order
  shuffled_temp <- sample(ats$Temp)
  
  # Calculate the correlation coefficient for the shuffled data
  perm_cor[i] <- cor(ats$Year, shuffled_temp)
}
# Assuming you've already conducted the permutation test and have the perm_cor vector
# Load necessary libraries
library(ggplot2)
# Create a density plot of permutation correlation coefficients
ggplot(data.frame(perm_cor = perm_cor), aes(x = perm_cor)) +
  geom_density(fill = "skyblue", color = "black") +
  labs(title = "Density Plot of Permutation Correlation Coefficients",
       x = "Correlation Coefficients",
       y = "Density")+
  geom_vline(xintercept = observed_cor, linetype = "dashed", color = "red", size = 1)
ggsave("../results/Florida.pdf", device = "pdf")
observed_cor
p_value <- sum(perm_cor >= observed_cor) / n_permutations
p_value
source("F.tex")
source("F.tex")
source("F.tex")
\documentclass[a4paper,12pt]{article}
\usepackage{graphicx}
\usepackage{listings}
\title{Is Florida getting warmer?}
\author{Zhongbin Hu}
\date{21/10/2023}
\begin{document}
  \maketitle
  \section{Results}
  \begin{figure}[h]
    \centering
    \includegraphics[width=0.7\textwidth]{../data/Florida.pdf}
    \caption{Distribution of Permutation Correlation Coefficients with Observed Coefficient}
    \label{Florida}
  \end{figure}
The figure above includes the permuted corrlation coefficients and observed coefficient.The observed correlation coefficient between years and temperature in the original dataset was calculated to be around 0.5331784. 
After 10,000 permutations and caculation, it was found that all of 10,000 permuted correlation coefficients were smaller or equal than the observed one. The approximate p-value is 0 after caculation.
\section{Interpretation}
From the figure the permuted correlation coefficients is nearly normaly distributed, and the observed coefficient is larger than all the permuted coefficient. This means the observed coefficient hardly occured by random chance.
In addition, the approximate samll p-value obtained from the permutation test suggests that the correlation between years and temperature is statistically significant.
Since the observed coefficient is larger than 0, there is a positive correlation between the year and temperature.
Therefore, the data supports the hypothesis that there is a significant correlation between the year and temperature Florida during the 20th century and Florida is becoming warmer.
\end{document}
 pdflatex F.tex
pdflatex F.tex
pdflatex F.tex
bibtex F
pdflatex F.tex
pdflatex F.tex
getwd()
source("PP_Regress.R")
source("PP_Regress.R")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set the path to the dataset and read it
df <- read.csv("../data/EcolArchives-E089-51-D1.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(model = lm(Prey.mass ~ Predator.mass, data = .)) %>%
  summarize(
    slope = coef(model)[[2]],
    intercept = coef(model)[[1]],
    R = summary(model)$r.squared,
    F_statistic = summary(model)$fstatistic[1],
    p_value = summary(model)$fstatistic[2]
  )
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)
 # Save plot as a PDF in the Results directory
par(mfcol=c(5,1))
ggplot(df, aes(x = log(Predator.mass), y = log(Prey.mass), color = Predator.lifestage)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(.~Type.of.feeding.interaction) +
  labs(title = "Linear Regression on Predator-Prey Interactions") +
  theme_minimal()
ggsave("../results/PP_Regress_plot.pdf", device = "pdf")
install.packages("dplyr")
source("PP_Regress.R")
source("PP_Regress.R")
# Load necessary libraries
library(maps)
# Load GPDD data
load("GPDDFiltered.RData")
# Create a world map
map("world")
# Superimpose locations from GPDD dataframe
points(GPDD$Longitude, GPDD$Latitude, col = "red", pch = 20)
source("GPDD_Data.R")
source("GPDD_Data.R")
source("GPDD_Data.R")
source("GPDD_Data.R")
source("GPDD_Data.R")
source("GPDD_Data.R")
source("GPDD_Data.R")
source("GPDD_Data.R")
source("GPDD_Data.R")
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
#calculate the observed correlation coefficient
observed_cor <- cor(ats$Year, ats$Temp)
#set the number of permutations
n_permutations <- 10000
#initialize a vector to store random correlation coefficients
rand_cor <- numeric(n_permutations)
#perform the permutation test
for (i in 1:n_permutations) {
  #shuffle the temperature data
  shuffled_temp <- sample(ats$Temp)
  
  #calculate the correlation coefficient for the shuffled data
  rand_cor[i] <- cor(ats$Year, shuffled_temp)
}
library(ggplot2)
#create a density plot of random correlation coefficients
ggplot(data.frame(rand_cor = rand_cor), aes(x = rand_cor)) +
  geom_density(fill = "skyblue", color = "black") +
  labs(title = "Density Plot of Random Correlation Coefficients",
       x = "Correlation Coefficients",
       y = "Density")+
  geom_vline(xintercept = observed_cor, linetype = "dashed", color = "red", size = 1)
ggsave("../results/Florida_plot.pdf", device = "pdf")
observed_cor
#caculate the p-value
p_value <- sum(rand_cor >= observed_cor) / n_permutations
p_value
source("PP_Dists.R")
source("PP_Regress.R")
#load the library
library(tidyverse)
#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0
#convert from wide to long format
MyData <- MyData[-1,] #remove the first row
colnames(MyData) <- MyData[1,] #set column names from the original data
MyData <- MyData[-1,] #remove the second row
MyWrangledData <- MyData %>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
#load the library
library(tidyverse)
#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0
#convert from wide to long format
MyData <- MyData[-1,] #remove the first row
colnames(MyData) <- MyData[1,] #set column names from the original data
MyData <- MyData[-1,] #remove the second row
MyWrangledData <- MyData %>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
source("DataWrangTidy.R")
#load the library
library(tidyverse)
#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = TRUE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0
#convert from wide to long format
MyData <- MyData[-1,] #remove the first row
colnames(MyData) <- MyData[1,] #set column names from the original data
MyData <- MyData[-1,] #remove the second row
MyWrangledData <- MyData %>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )
#load the library
library(tidyverse)
#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = TRUE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0
#convert from wide to long format
MyData <- MyData[-1,] #remove the first row
colnames(MyData) <- MyData[1,] #set column names from the original data
MyData <- MyData[-1,] #remove the second row
MyWrangledData <- MyData %>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
source("DataWrangTidy.R")
source("DataWrangTidy.R")
source("DataWrangTidy.R")
# Load necessary libraries
library(tidyverse)

# Read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

# Transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

# Convert from wide to long format
MyData <- MyData[-1,]  # Remove the first row
colnames(MyData) <- MyData[1,]  # Set column names from the original data
MyData <- MyData[-1,]  # Remove the second row

MyWrangledData <- MyData %>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )

# Print structure, head, and dimensions of the final dataset
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

#convert from wide to long format
MyData <- MyData[-1,] #remove the first row
colnames(MyData) <- MyData[1,] #set column names from the original data

MyWrangledData <- MyData %>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )


str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

MyData
head(MyData)
MyData <- MyData[-1,] #remove the first row
colnames(MyData) <- MyData[1,] #set column names from the original data
head(MyData)
#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

#convert from wide to long format
TempData <- MyData[-1,] #remove the first row
colnames(MyData) <- TempData[1,] #set column names from the original data

MyWrangledData <- TempData%>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )


str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

#convert from wide to long format
TempData <- MyData[-1,] #remove the first row
colnames(MyData) <- TempData[1,] #set column names from the original data
TempData
head(TempData)
colnames(MyData)
#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0
head(MyData)
colnames(MyData)
MyData <- MyData[-1,] #remove the first row
head(MyData)
MyData <- read.csv("../data/PoundHillData.csv", header = True)
MyData <- read.csv("../data/PoundHillData.csv", header = TRUE)
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0
head(MyData)
colnames(MyData)
MyData <- MyData[-1,] #remove the first row
head(MyData)
MyData <- read.csv("../data/PoundHillData.csv", header = TRUE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

MyData[1,]
#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = TRUE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

#convert from wide to long format
TempData <- MyData[-1,] #remove the first row
colnames(TempData) <- MyData[1,] #set column names from the original data

MyWrangledData <- TempData%>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )


str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = TRUE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

TempData <- MyData[-1,] #remove the first row
head(TempData)
colnames(TempData) <- MyData[1,] #set column names from the original data
head(TempData)
#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = False)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

#convert from wide to long format
TempData <- MyData[-1,] #remove the first row
colnames(TempData) <- MyData[1,] #set column names from the original data

#load the library
library(tidyverse)

#read the dataset
MyData <- read.csv("../data/PoundHillData.csv", header = FALSE)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

#transpose the dataset
MyData <- as.data.frame(t(MyData))
MyData[MyData == ""] <- 0

#convert from wide to long format
TempData <- MyData[-1,] #remove the first row
colnames(TempData) <- MyData[1,] #set column names from the original data
MyWrangledData <- TempData%>%
  gather(key = "Species", value = "Count", -Cultivation, -Block, -Plot, -Quadrat) %>%
  mutate(
    Cultivation = as.factor(Cultivation),
    Block = as.factor(Block),
    Plot = as.factor(Plot),
    Quadrat = as.factor(Quadrat),
    Count = as.integer(Count)
  )


str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
git add .
